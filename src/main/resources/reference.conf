akka.http.server.idle-timeout = 180 s
akka.http.server.request-timeout = 60 s

resourceTypes = {
  resource_type_admin = {
    actionPatterns = {
      read_policies = {
        description = "view all policies and policy details for this workspace"
      }
      alter_policies = {
        description = "create and delete policies for this billing-project"
      }
      "share_policy::.+" = {
        description = "modify the membership of the specified policy"
      }
      "read_policy::.+" = {
        description = "view the membership of the specified policy"
      }
      set_public = {
        description = "set policies to public"
      }
      "set_public::.+" = {
        description = "set the specified policy to public"
      }
    }

    ownerRoleName = "owner"
    roles = {
      owner = {
        roleActions = ["read_policies", "alter_policies"]
      }
    }
    reuseIds = false
  }
  workspace = {
    actionPatterns = {
      delete = {
        description = "delete this workspace"
      }
      read_policies = {
        description = "view all policies and policy details for this workspace"
      }
      "share_policy::owner" = {
        description = "change the membership of the owner policy for this workspace"
      }
      "share_policy::application" = {
        description = "change the membership of the application policy for this workspace"
      }
      "share_policy::writer" = {
        description = "change the membership of the writer policy for this workspace"
      }
      "share_policy::reader" = {
        description = "change the membership of the reader policy for this workspace"
      }
      "share_policy::can-compute" = {
        description = "change the member of the can-compute policy for this workspace"
      }
      "read_policy::owner" = {
        description = "view the details of the owner policy for this workspace"
      }
      "read" = {
        description = "perform reader actions on the workspace"
        authDomainConstrainable = true
      }
      "write" = {
        description = "perform writer actions on the workspace"
        authDomainConstrainable = true
      }
      "own" = {
        description = "perform owner actions on the workspace"
        authDomainConstrainable = true
      }
      "compute" = {
        description = "launch batch compute in the workspace"
      }
      "catalog" = {
        description = "catalog the workspace"
      }
      "read_auth_domain" = {
        description = "view the auth domain of the workspace"
      }
      "create_controlled_user_private" = {
        description = "create controlled, user-owned private resources in the workspace"
      }
      "create_controlled_user_shared" = {
        description = "create controlled, user-owned shared resources in the workspace"
      }
      "create_controlled_application_private" = {
        description = "create controlled, application-owned private resources in the workspace"
      }
      "create_controlled_application_shared" = {
        description = "create controlled, application-owned shared resources in the workspace"
      }
      "create_referenced_resource" = {
        description = "create references to resources in the workspace"
      }
      "update_referenced_resource" = {
        description = "update references to resources in the workspace"
      }
      "delete_referenced_resource" = {
        description = "delete references to resources in the workspace"
      }
      add_child = {
        description = "add a child resource"
      }
      remove_child = {
        description = "remove a child resource"
      }
      list_children = {
        description = "list child resources"
      }
    }
    ownerRoleName = "owner"
    roles = {
      project-owner = {
        # this role is used for display purposes but does not confer additional actions, use in conjunction with owner role
        roleActions = []
      }
      owner = {
        roleActions = ["delete", "read_policies", "share_policy::owner", "share_policy::application", "share_policy::writer", "share_policy::reader", "own", "write", "read", "compute", "share_policy::share-reader", "share_policy::share-writer", "share_policy::can-compute", "share_policy::can-catalog", "read_auth_domain", "create_controlled_user_shared", "create_controlled_user_private", "create_referenced_resource", "update_referenced_resource", "delete_referenced_resource", "list_children", "remove_child", "add_child"]
        # Workspace Manager also maintains a mapping of workspace roles to controlled resource roles. If you change this mapping, check that service's mapping as well.
        descendantRoles = {
          google-project = ["owner"]
          controlled-user-shared-workspace-resource = ["editor", "writer", "reader"]
          controlled-user-private-workspace-resource = ["assigner", "editor"]
          controlled-application-shared-workspace-resource = ["editor", "writer", "reader"]
          controlled-application-private-workspace-resource = ["editor"]
        }
      }
      application = {
        roleActions = ["read_policy::owner", "write", "read", "create_controlled_user_shared", "create_controlled_user_private", "create_controlled_application_shared", "create_controlled_application_private", "create_referenced_resource", "update_referenced_resource", "delete_referenced_resource", "list_children", "add_child", "remove_child", "read_auth_domain"]
      }
      writer = {
        roleActions = ["read_policy::owner", "write", "read", "create_controlled_user_shared", "create_controlled_user_private", "create_referenced_resource", "update_referenced_resource", "delete_referenced_resource", "list_children", "add_child", "remove_child", "read_auth_domain"]
        descendantRoles = {
          controlled-user-shared-workspace-resource = ["editor", "writer", "reader"]
          controlled-user-private-workspace-resource = ["editor"]
          controlled-application-shared-workspace-resource = ["editor", "writer", "reader"]
          controlled-application-private-workspace-resource = ["editor"]
        }
      }
      reader = {
        roleActions = ["read_policy::owner", "read", "read_auth_domain"]
        descendantRoles = {
          controlled-user-shared-workspace-resource = ["reader"]
          controlled-application-shared-workspace-resource = ["reader"]
        }
      }
      share-reader = {
        roleActions = ["share_policy::reader", "read_policies"]
      }
      share-writer = {
        roleActions = ["share_policy::writer", "share_policy::reader", "read_policies"]
      }
      can-compute = {
        roleActions = ["compute"]
        descendantRoles = {
          google-project = ["notebook-user"]
        }
      }
      can-catalog = {
        roleActions = ["catalog"]
      }
    }
    authDomainConstrainable = true
    reuseIds = false
  }
  controlled-user-shared-workspace-resource = {
    actionPatterns = {
      delete = {
        description = "delete this resource"
      }
      read_policies = {
        description = "view all policies and policy details for this resource"
      }
      set_parent = {
        description = "set the parent workspace of this resource"
      }
      "share_policy::owner" = {
        description = "change the membership of the owner policy for this resource"
      }
      "share_policy::editor" = {
        description = "change the membership of the editor policy for this resource"
      }
      "share_policy::writer" = {
        description = "change the membership of the writer policy for this resource"
      }
      "share_policy::reader" = {
        description = "change the membership of the reader policy for this resource"
      }
      "read" = {
        description = "perform reader actions on the resource"
      }
      "write" = {
        description = "perform writer actions on the resource"
      }
      "edit" = {
        description = "perform editor actions on the resource"
      }
      "own" = {
        description = "perform owner actions on the resource"
      }
    }
    ownerRoleName = "owner"
    roles = {
      owner = {
        roleActions = ["delete", "read_policies", "share_policy::owner", "share_policy::editor", "share_policy::writer", "share_policy::reader", "own", "edit", "set_parent"]
      }
      editor = {
        roleActions = ["delete", "edit"]
      }
      writer = {
        roleActions = ["read", "write"]
      }
      reader = {
        roleActions = ["read"]
      }
    }
    reuseIds = false
  }
  controlled-user-private-workspace-resource = {
    actionPatterns = {
      delete = {
        description = "delete this resource"
      }
      read_policies = {
        description = "view all policies and policy details for this resource"
      }
      set_parent = {
        description = "set the parent workspace of this resource"
      }
      "share_policy::owner" = {
        description = "change the membership of the owner policy for this resource"
      }
      "share_policy::editor" = {
        description = "change the membership of the editor policy for this resource"
      }
      "share_policy::writer" = {
        description = "change the membership of the writer policy for this resource"
      }
      "share_policy::reader" = {
        description = "change the membership of the reader policy for this resource"
      }
      "read" = {
        description = "perform reader actions on the resource"
      }
      "write" = {
        description = "perform writer actions on the resource"
      }
      "edit" = {
        description = "perform editor actions on the resource"
      }
      "own" = {
        description = "perform owner actions on the resource"
      }
      "manage_private_user" = {
        description = "assign, remove, and reassign the private user"
      }
    }
    ownerRoleName = "owner"
    roles = {
      owner = {
        roleActions = ["delete", "read_policies", "share_policy::owner", "share_policy::editor", "share_policy::writer", "share_policy::reader", "own", "edit", "manage_private_user", "set_parent"]
      }
      assigner = {
        roleActions = ["manage_private_user", "read_policies", "share_policy::editor", "share_policy::writer", "share_policy::reader"]
      }
      editor = {
        roleActions = ["delete", "edit"]
      }
      writer = {
        roleActions = ["read", "write"]
      }
      reader = {
        roleActions = ["read"]
      }
    }
    reuseIds = false
  }
  controlled-application-shared-workspace-resource = {
    actionPatterns = {
      delete = {
        description = "delete this resource"
      }
      read_policies = {
        description = "view all policies and policy details for this resource"
      }
      set_parent = {
        description = "set the parent workspace of this resource"
      }
      "share_policy::owner" = {
        description = "change the membership of the owner policy for this resource"
      }
      "share_policy::editor" = {
        description = "change the membership of the editor policy for this resource"
      }
      "share_policy::writer" = {
        description = "change the membership of the writer policy for this resource"
      }
      "share_policy::reader" = {
        description = "change the membership of the reader policy for this resource"
      }
      "read" = {
        description = "perform reader actions on the resource"
      }
      "write" = {
        description = "perform writer actions on the resource"
      }
      "edit" = {
        description = "perform editor actions on the resource"
      }
      "own" = {
        description = "perform owner actions on the resource"
      }
    }
    ownerRoleName = "owner"
    roles = {
      owner = {
        roleActions = ["delete", "read_policies", "share_policy::owner", "share_policy::editor", "share_policy::writer", "share_policy::reader", "own", "edit", "set_parent"]
      }
      editor = {
        roleActions = ["delete", "edit"]
      }
      writer = {
        roleActions = ["read", "write"]
      }
      reader = {
        roleActions = ["read"]
      }
    }
    reuseIds = false
  }
  controlled-application-private-workspace-resource = {
    actionPatterns = {
      delete = {
        description = "delete this resource"
      }
      read_policies = {
        description = "view all policies and policy details for this resource"
      }
      set_parent = {
        description = "set the parent workspace of this resource"
      }
      "share_policy::owner" = {
        description = "change the membership of the owner policy for this resource"
      }
      "share_policy::editor" = {
        description = "change the membership of the editor policy for this resource"
      }
      "share_policy::writer" = {
        description = "change the membership of the writer policy for this resource"
      }
      "share_policy::reader" = {
        description = "change the membership of the reader policy for this resource"
      }
      "read" = {
        description = "perform reader actions on the resource"
      }
      "write" = {
        description = "perform writer actions on the resource"
      }
      "edit" = {
        description = "perform editor actions on the resource"
      }
      "own" = {
        description = "perform owner actions on the resource"
      }
      "manage_private_user" = {
        description = "assign, remove, and reassign the private user"
      }
    }
    ownerRoleName = "owner"
    roles = {
      owner = {
        roleActions = ["delete", "read_policies", "share_policy::owner", "share_policy::editor", "share_policy::writer", "share_policy::reader", "own", "edit", "manage_private_user", "set_parent"]
      }
      assigner = {
        roleActions = ["manage_private_user", "read_policies", "share_policy::editor", "share_policy::writer", "share_policy::reader"]
      }
      editor = {
        roleActions = ["delete", "edit"]
      }
      writer = {
        roleActions = ["read", "write"]
      }
      reader = {
        roleActions = ["read"]
      }
    }
    reuseIds = false
  }
  managed-group = {
    actionPatterns = {
      delete = {
        description = "Delete this group"
      }
      read_policies = {
        description = "view all policies and policy details for this group"
      }
      use = {
        description = "utilize this group in order to share or restrict access to other SAM entities"
      }
      "share_policy::admin" = {
        description = "change the membership of the admin policy for this group"
      }
      "share_policy::member" = {
        description = "change the membership of the member policy for this group"
      }
      "share_policy::admin-notifier" = {
        description = "change the membership of the admin-notifier policy for this group"
      }
      "read_policy::admin" = {
        # Doug Said this may be redundant with "read_policies" and could be removed
        description = "view the details of the admin policy for this group"
      }
      "read_policy::member" = {
        # Doug Said this may be redundant with "read_policies" and could be removed
        description = "view the details of the member policy for this group"
      }
      "read_policy::admin-notifier" = {
        description = "view the details of the admin-notifier policy for this group"
      }
      "notify_admins" = {
        description = "send notifications to the admins of this group"
      }
      "set_access_instructions" = {
        description = "set access instructions for this group"
      }
    }
    ownerRoleName = "admin"
    roles = {
      admin = {
        roleActions = ["delete", "read_policies", "use", "share_policy::admin", "share_policy::member", "share_policy::admin-notifier", "read_policy::admin", "read_policy::member", "read_policy::admin-notifier", "set_access_instructions"]
      }
      member = {
        roleActions = ["use"]
      }
      admin-notifier = {
        roleActions = ["notify_admins"]
      }
    }
    reuseIds = true
  }
  workflow-collection = {
    actionPatterns = {
      delete = {
        description = "delete this workflow-collection"
      }
      add = {
        description = "add workflows to this workflow-collection"
      }
      view = {
        description = "list workflows and workflow details in this workflow-collection"
      }
      abort = {
        description = "abort any workflow in this workflow-collection"
      }
      get_cost = {
        description = "get the cost of any workflow in this workflow-collection"
      }
      update = {
        description = "update any workflow in this workflow-collection"
      }
      alter_policies = {
        description = "create and delete policies on this workflow-collection"
      }
      read_policies = {
        description = "view all policies and policy details for this workflow-collection"
      }
    }
    ownerRoleName = "owner"
    roles = {
      owner = {
        roleActions = ["delete", "add", "view", "abort", "get_cost", "update", "alter_policies", "read_policies"]
      }
      reader = {
        roleActions = ["view", "get_cost"]
      }
      writer = {
        roleActions = ["view", "add", "delete", "abort", "get_cost", "update"]
      }
    }
    reuseIds = false
  }
  caas = {
    actionPatterns = {
      get_whitelist = {
        description = "view the whitelist"
      }
      alter_policies = {
        description = "create and delete policies for this caas"
      }
      read_policies = {
        description = "view all policies and policy details for this caas"
      }
    }
    ownerRoleName = "owner"
    roles = {
      owner = {
        roleActions = ["alter_policies", "read_policies"]
      }
      cromiam = {
        roleActions = ["get_whitelist"]
      }
    }
    reuseIds = false
  }
  google-project = {
    actionPatterns = {
      read_policies = {
        description = "list all policies and policy details for this google-project"
      }
      list_notebook_cluster = {
        description = "list all notebook clusters in this google-project"
      }
      launch_notebook_cluster = {
        description = "launch a new notebook cluster in this google-project"
      }
      delete_notebook_cluster = {
        description = ""
      }
      stop_start_notebook_cluster = {
        description = "stop and start notebook clusters in this google-project"
      }
      list_persistent_disk = {
        description = "list all persistent disks in this google-project"
      }
      create_persistent_disk = {
        description = "create persistent disk in this google-project"
      }
      delete_persistent_disk = {
        description = "delete persistent disk in this google-project"
      }
      create_kubernetes_app = {
        description = "create kubernetes application in this google-project"
      }
      delete = {
        description = "delete this google-project"
      }
      get_parent = {
        description = "get the parent resource of this google-project"
      }
      set_parent = {
        description = "set the parent resource of this google-project"
      }
      add_child = {
        description = "add child to google project"
      }
    }
    ownerRoleName = "owner"
    roles = {
      owner = {
        roleActions = ["read_policies", "list_notebook_cluster", "delete_notebook_cluster", "list_persistent_disk", "delete_persistent_disk", "delete", "get_parent", "set_parent"]
        includedRoles = ["notebook-user"]
        descendantRoles = {
          kubernetes-app = ["manager"]
        }
      }
      notebook-user = {
        roleActions = ["launch_notebook_cluster", "create_persistent_disk", "create_kubernetes_app", "add_child"]
      }
    }
    reuseIds = true
  }
  billing-project = {
    actionPatterns = {
      create_workspace = {
        description = "create new workspaces in this billing-project"
      }
      alter_policies = {
        description = "create and delete policies for this billing-project"
      }
      read_policies = {
        description = "list all policies and policy details for this billing-project"
      }
      launch_batch_compute = {
        description = "launch workflows in this billing-project"
      }
      list_notebook_cluster = {
        description = "list all notebook clusters in this billing-project"
      }
      launch_notebook_cluster = {
        description = "launch a new notebook cluster in this billing-project"
      }
      delete_notebook_cluster = {
        description = ""
      }
      stop_start_notebook_cluster = {
        description = "stop and start notebook clusters in this billing-project"
      }
      list_persistent_disk = {
        description = "list all persistent disks in this billing-project"
      }
      create_persistent_disk = {
        description = "create persistent disk in this billing-project"
      }
      delete_persistent_disk = {
        description = "delete persistent disk in this billing-project"
      }
      create_kubernetes_app = {
        description = "create kubernetes application in this billing-project"
      }
      alter_google_role = {
        description = "modify the role of users on the google project (only a fixed set of roles are permitted)"
      }
      "share_policy::.+" = {
        description = "modify the membership of the specified policy"
      }
      "read_policy::.+" = {
        description = "view the membership of the specified policy"
      }
      view_status = {
        description = "view status of a billing-project"
      }
      add_to_service_perimeter = {
        description = "add this billing-project to a service-perimeter"
      }
      delete = {
        description = "delete this billing-project"
      }
      update_billing_account = {
        description = "update the billing account on this billing-project"
      }
      alter_spend_report_configuration = {
        description = "alter the spend report config (i.e. the BigQuery dataset for spend reports) for this billing-project"
      }
      add_child = {
        description = "add children, e.g. google-project"
      }
      remove_child = {
        description = "remove children, e.g. google-project"
      }
      list_children = {
        description = "list children, e.g. google-project"
      }
    }
    ownerRoleName = "owner"
    roles = {
      owner = {
        roleActions = ["view_status", "create_workspace", "alter_policies", "read_policies", "launch_batch_compute", "list_notebook_cluster", "launch_notebook_cluster", "delete_notebook_cluster", "list_persistent_disk", "create_persistent_disk", "delete_persistent_disk", "create_kubernetes_app", "alter_google_role", "add_to_service_perimeter", "delete", "update_billing_account", "alter_spend_report_configuration", "list_children", "remove_child", "add_child"]
        descendantRoles = {
          google-project = ["owner"]
        }
      }
      workspace-creator = {
        roleActions = ["view_status", "create_workspace", "share_policy::can-compute-user", "read_policy::can-compute-user"]
      }
      batch-compute-user = {
        roleActions = ["launch_batch_compute"]
      }
      notebook-user = {
        roleActions = ["launch_notebook_cluster", "create_persistent_disk", "create_kubernetes_app"]
        descendantRoles = {
          google-project = ["notebook-user"]
        }
      }
    }
    reuseIds = true
  }
  notebook-cluster = {
    actionPatterns = {
      status = {
        description = "view notebook cluster status details and configuration"
      }
      connect = {
        description = "connect to the Jupyter notebook running on the notebook cluster"
      }
      delete = {
        description = "delete the notebook cluster"
      }
      read_policies = {
        description = "view all policies and policy details for the notebook cluster"
      }
      stop_start = {
        description = "stop and start the notebook cluster VMs"
      }
      modify = {
        description = "modify attributes of the cluster"
      }
    }
    ownerRoleName = "creator"
    roles = {
      creator = {
        roleActions = ["status", "connect", "delete", "read_policies", "stop_start", "modify"]
      }
    }
    reuseIds = false
  }
  persistent-disk = {
    actionPatterns = {
      read = {
        description = "read metadata and contents of persistent disk"
      }
      attach = {
        description = "attach persistent disk to a VM"
      }
      modify = {
        description = "modify persistent disk"
      }
      delete = {
        description = "delete persistent disk"
      }
      read_policies = {
        description = "view all policies and policy details for the persistent disk"
      }
    }
    ownerRoleName = "creator"
    roles = {
      creator = {
        roleActions = ["read", "attach", "modify", "delete", "read_policies"]
      }
    }
    reuseIds = false
  }
  kubernetes-app = {
    actionPatterns = {
      delete = {
        description = "delete kubernetes application"
      }
      connect = {
        description = "connect to kubernetes application"
      }
      update = {
        description = "update kubernetes application"
      }
      status = {
        description = "view details and configuration of the kubernetes application"
      }
      stop = {
        description = "stop kubernetes application"
      }
      start = {
        description = "start kubernetes application"
      }
      read_policies = {
        description = "view all policies and policy details for the kubernetes application"
      }
      set_parent = {
        description = "set parent of kubernetes app"
      }
    }
    ownerRoleName = "creator"
    roles = {
      creator = {
        roleActions = ["delete", "connect", "update", "status", "stop", "start", "read_policies", "set_parent"]
      }
      manager = {
        roleActions = ["delete", "status", "read_policies"]
      }
    }
    reuseIds = false
  }
  cloud-extension = {
    actionPatterns = {
      get_pet_private_key = {
        description = ""
      }
      alter_policies = {
        description = ""
      }
      read_policies = {
        description = ""
      }
    }
    ownerRoleName = "owner"
    roles = {
      owner = {
        roleActions = ["alter_policies", "read_policies"]
      }
      google = {
        roleActions = ["get_pet_private_key"]
      }
    }
    reuseIds = false
  }
  dockstore-tool = {
    actionPatterns = {
      "delete" = {
        description = "delete a tool"
      },
      "read_policies" = {
        description = "read tool policies"
      },
      "alter_policies" = {
        description = "alter tool policies"
      },
      "write" = {
        description = "modify tool"
      },
      "read" = {
        description = "read tool"
      }
    }
    ownerRoleName = "owner"
    roles = {
      owner = {
        roleActions = ["delete", "read_policies", "alter_policies", "write", "read"]
      },
      writer = {
        roleActions = ["write", "read"]
      },
      reader = {
        roleActions = ["read"]
      }
    }
    reuseIds = true

  }
  entity-collection = {
    actionPatterns = {
      "delete" = {
        description = "delete this entity collection"
      },
      "write" = {
        description = "create/update/delete entities in this collection"
      },
      "read" = {
        description = "read entities in this collection"
      },
      "alter_policies" = {
        description = "alter entity collection policies"
      },
      "read_policies" = {
        description = "read entity collection policies"
      }
    }
    ownerRoleName = "owner"
    roles = {
      owner = {
        roleActions = ["delete", "write", "read", "alter_policies", "read_policies"]
      },
      writer = {
        roleActions = ["write", "read"]
      },
      reader = {
        roleActions = ["read"]
      }
    }
    reuseIds = false
  }
  datarepo = {
    actionPatterns = {
      create_dataset = {
        description = "Has permission to create a dataset"
      }
      configure = {
        description = "Edit and read the live configuration on a datarepo instance"
      }
      "share_policy::admin" = {
        description = "Can grant and revoke a users' admin permission"
      }
      "share_policy::steward" = {
        description = "Can grant and revoke a users' steward permission"
      }
      "read_policies" = {
        description = "Can read policies"
      }
      "read_policy::steward" = {
        description = "Can read the steward policy"
      }
      "alter_policies" = {
        description = "Can alter policies"
      }
      "list_jobs" = {
        description = "Can list repo jobs"
      }
      "delete_jobs" = {
        description = "Can delete repo jobs"
      }
      "delete" = {
        description = "Can delete policies/resources"
      }
    }
    ownerRoleName = "admin"
    roles = {
      admin = {
        roleActions = ["list_jobs", "delete_jobs", "delete", "share_policy::steward", "share_policy::admin", "read_policies", "alter_policies", "configure"]
      }
      steward = {
        roleActions = ["list_jobs", "delete_jobs", "create_dataset", "share_policy::steward", "read_policy::steward"]
      }
    }
    reuseIds = true
  }
  spend-profile = {
    actionPatterns = {
      "read_policies" = {
        description = "Can read policies"
      }
      "update_billing_account" = {
        description = "Ability to update the spend profile to use a different billing account"
      }
      "update_metadata" = {
        description = "Ability to update the spend profile's metadata, including name and description"
      }
      "delete" = {
        description = "Ability to delete profiles"
      }
      "link" = {
        description = "Ability to link a spend profile to an object, thus allowing the object to spend funds from the designated billing account"
      }
      "share_policy::owner" = {
        description = "Ability to grant and revoke a users' owner permission"
      }
      "share_policy::user" = {
        description = "Ability to grant and revoke a users' user permission"
      }
      "alter_policies" = {
        description = "Can alter policies"
      }
    }
    ownerRoleName = "owner"
    roles = {
      owner = {
        roleActions = ["update_billing_account", "update_metadata", "delete", "link", "share_policy::owner", "share_policy::user", "read_policies"]
      }
      user = {
        roleActions = ["link", "share_policy::user"]
      }
      admin = {
        roleActions = ["share_policy::owner", "read_policies", "alter_policies"]
      }
    }
    reuseIds = true
  }
  study = {
    actionPatterns = {
      delete = {
        description = "delete old type study"
      }
    }
    ownerRoleName = "steward"
    roles = {
      steward = {
        roleActions = ["delete", "read_policies", "alter_policies"]
      }
    }
    reuseIds = true
  }
  dataset = {
    actionPatterns = {
      read_dataset = {
        description = "Read dataset metadata"
      }
      edit_dataset = {
        description = "(deprecated) Change dataset metadata"
      }
      manage_schema = {
        description = "Change dataset metadata"
      }
      delete = {
        description = "Delete dataset"
      }
      read_data = {
        description = "Read dataset data"
      }
      ingest_data = {
        description = "Add data to a dataset"
      }
      soft_delete = {
        description = "Soft delete dataset data"
      }
      hard_delete = {
        description = "Hard delete dataset data"
      }
      update_data = {
        description = "(deprecated) Add or delete data for a dataset"
      }
      create_datasnapshot = {
        description = "(deprecated) Create a datasnapshot that includes this dataset"
      }
      link_snapshot = {
        description = "Create a snapshot that uses this dataset"
      }
      unlink_snapshot = {
        description = "Delete a snapshot that uses this dataset"
      }
      list_snapshots = {
        description = "List snapshots that are linked to this dataset"
      }
      "share_policy::steward" = {
        description = "Can grant and revoke a users' steward permission"
      }
      "share_policy::custodian" = {
        description = "Can grant and revoke a users' custodian permission"
      }
      "share_policy::ingester" = {
        description = "Can grant and revoke a users' ingester permission"
      }
      "read_policies" = {
        description = "Can read policies"
      }
      "alter_policies" = {
        description = "Can alter policies"
      }
    }
    ownerRoleName = "steward"
    roles = {
      steward = {
        roleActions = ["delete", "read_dataset", "read_data", "edit_dataset", "manage_schema", "ingest_data",  "update_data", "soft_delete", "hard_delete", "create_datasnapshot",  "share_policy::steward", "share_policy::custodian", "share_policy::ingester", "share_policy:snapshot_creator", "read_policies", "link_snapshot", "unlink_snapshot", "list_snapshots"]
      }
      custodian = {
        roleActions = ["read_dataset", "read_data", "manage_schema", "create_datasnapshot", "ingest_data", "soft_delete", "hard_delete", "read_policies", "link_snapshot", "unlink_snapshot", "list_snapshots"]
      }
      ingester = {
        roleActions = ["read_dataset", "read_data", "ingest_data"]
      }
      snapshot_creator = {
        roleActions = ["read_data", "read_policies", "link_snapshot"]
      }
      admin = {
        roleActions = ["share_policy::steward", "read_policies", "alter_policies"]
      }
    }
    reuseIds = true
  }
  datasnapshot = {
    actionPatterns = {
      delete = {
        description = "Delete datasnapshot"
      }
      edit_datasnapshot = {
        description = "(deprecated) Change datasnapshot name and description"
      }
      update_snapshot = {
        description = "Update snapshot information"
      }
      read_data = {
        description = "Read data from the datasnapshot"
      }
      discover_data = {
        description = "Discover data about the datasnapshot"
      }
      "share_policy::steward" = {
        description = "Can grant and revoke a users' steward permission"
      }
      "share_policy::custodian" = {
        description = "Can grant and revoke a users' custodian permission"
      }
      "read_policy::custodian" = {
        description = "Can see the custodians of a dataset"
      }
      "share_policy::reader" = {
        description = "Can grant and revoke a users' read permission"
      }
      "share_policy::discoverer" = {
        description = "Can grant and revoke a users' discover permission"
      }
      "read_policies" = {
        description = "Can read policies"
      }
      "alter_policies" = {
        description = "Can alter policies"
      }
    }
    ownerRoleName = "steward"
    roles = {
      steward = {
        roleActions = ["delete", "edit_datasnapshot", "update_snapshot", "read_data",  "discover_data",  "share_policy::steward", "share_policy::custodian", "share_policy::reader",  "share_policy::discoverer", "read_policies"]
      }
      custodian = {
        roleActions = ["delete", "edit_datasnapshot", "update_snapshot", "read_data",  "discover_data",  "share_policy::reader",  "share_policy::discoverer", "read_policies"]
      }
      discoverer = {
        roleActions = ["discover_data", "read_policy::steward", "read_policy::discoverer"]
      }
      reader = {
        roleActions = ["read_data", "discover_data", "read_policy::steward", "read_policy::custodian", "read_policy::discoverer"]
      }
      admin = {
        roleActions = ["read_policies", "share_policy::steward", "alter_policies"]
      }
    }
    reuseIds = true
  }
  service-perimeter = {
    actionPatterns = {
      alter_policies = {
        description = "create and delete policies for this service-perimeter"
      }
      read_policies = {
        description = "list all policies and policy details for this service-perimeter"
      }
      add_project = {
        description = "add a project to this service-perimeter"
      }
      add_account_to_whitelist = {
        description = "add a user or service-account to this service-perimeter's access level"
      }
      remove_account_from_whitelist = {
        description = "remove a user or service-account to this service-perimeter's access level"
      }
      remove_project = {
        description = "remove a project from this service-perimeter"
      }
      delete = {
        description = "delete this service-perimeter"
      }
    }
    ownerRoleName = "owner"
    roles = {
      owner = {
        roleActions = ["alter_policies", "read_policies", "add_project", "add_account_to_whitelist", "remove_account_from_whitelist", "remove_project", "delete"]
      }
    }
    reuseIds = true
  }
}


distributedLock {
  retryInterval: 5s
  maxRetry: 10
}

blockedEmailDomains = ["qwiklabs-gsuite.net", "qwiklabs.net"]
