akka.http.server.idle-timeout = 180 s
akka.http.server.request-timeout = 60 s

resourceTypes = {
  resource_type_admin = {
    actionPatternObjects = {
      read_policies = {
        description = "view all policies and policy details for this workspace"
      }
      alter_policies = {
        description = "create and delete policies for this billing-project"
      }
      "share_policy::.+" = {
        description = "modify the membership of the specified policy"
      }
      "read_policy::.+" = {
        description = "view the membership of the specified policy"
      }
      set_public = {
        description = "set policies to public"
      }
      "set_public::.+" = {
        description = "set the specified policy to public"
      }
    }

    ownerRoleName = "owner"
    roles = {
      owner = {
        roleActions = ["read_policies", "alter_policies"]
      }
    }
    reuseIds = false
  }
  workspace = {
    actionPatternObjects = {
      delete = {
        description = "delete this workspace"
      }
      read_policies = {
        description = "view all policies and policy details for this workspace"
      }
      "share_policy::owner" = {
        description = "change the membership of the owner policy for this workspace"
      }
      "share_policy::writer" = {
        description = "change the membership of the writer policy for this workspace"
      }
      "share_policy::reader" = {
        description = "change the membership of the reader policy for this workspace"
      }
      "share_policy::can-compute" = {
        description = "change the member of the can-compute policy for this workspace"
      }
      "read_policy::owner" = {
        description = "view the details of the owner policy for this workspace"
      }
      "read" = {
        description = "perform reader actions on the workspace"
        authDomainConstrainable = true
      }
      "write" = {
        description = "perform writer actions on the workspace"
        authDomainConstrainable = true
      }
      "own" = {
        description = "perform owner actions on the workspace"
        authDomainConstrainable = true
      }
      "compute" = {
        description = "launch batch compute in the workspace"
      }
      "catalog" = {
        description = "catalog the workspace"
      }
      "read_auth_domain" = {
        description = "view the auth domain of the workspace"
      }
    }
    ownerRoleName = "owner"
    roles = {
      project-owner = {
        # this role is used for display purposes but does not confer additional actions, use in conjunction with owner role
        roleActions = []
      }
      owner = {
        roleActions = ["delete", "read_policies", "share_policy::owner", "share_policy::writer", "share_policy::reader", "own", "write", "read", "compute", "share_policy::share-reader", "share_policy::share-writer", "share_policy::can-compute", "share_policy::can-catalog", "read_auth_domain"]
      }
      writer = {
        roleActions = ["read_policy::owner", "write", "read", "read_auth_domain"]
      }
      reader = {
        roleActions = ["read_policy::owner", "read", "read_auth_domain"]
      }
      share-reader = {
        roleActions = ["share_policy::reader", "read_policies"]
      }
      share-writer = {
        roleActions = ["share_policy::writer", "share_policy::reader", "read_policies"]
      }
      can-compute = {
        roleActions = ["compute"]
      }
      can-catalog = {
        roleActions = ["catalog"]
      }
    }
    authDomainConstrainable = true
    reuseIds = false
  }
  managed-group = {
    actionPatternObjects = {
      delete = {
        description = "Delete this group"
      }
      read_policies = {
        description = "view all policies and policy details for this group"
      }
      use = {
        description = "utilize this group in order to share or restrict access to other SAM entities"
      }
      "share_policy::admin" = {
        description = "change the membership of the admin policy for this group"
      }
      "share_policy::member" = {
        description = "change the membership of the member policy for this group"
      }
      "share_policy::admin-notifier" = {
        description = "change the membership of the admin-notifier policy for this group"
      }
      "read_policy::admin" = {
        # Doug Said this may be redundant with "read_policies" and could be removed
        description = "view the details of the admin policy for this group"
      }
      "read_policy::member" = {
        # Doug Said this may be redundant with "read_policies" and could be removed
        description = "view the details of the member policy for this group"
      }
      "read_policy::admin-notifier" = {
        description = "view the details of the admin-notifier policy for this group"
      }
      "notify_admins" = {
        description = "send notifications to the admins of this group"
      }
      "set_access_instructions" = {
        description = "set access instructions for this group"
      }
    }
    ownerRoleName = "admin"
    roles = {
      admin = {
        roleActions = ["delete", "read_policies", "use", "share_policy::admin", "share_policy::member", "share_policy::admin-notifier", "read_policy::admin", "read_policy::member", "read_policy::admin-notifier", "set_access_instructions"]
      }
      member = {
        roleActions = ["use"]
      }
      admin-notifier = {
        roleActions = ["notify_admins"]
      }
    }
    reuseIds = true
  }
  workflow-collection = {
    actionPatternObjects = {
      delete = {
        description = "delete this workflow-collection"
      }
      add = {
        description = "add workflows to this workflow-collection"
      }
      view = {
        description = "list workflows and workflow details in this workflow-collection"
      }
      abort = {
        description = "abort any workflow in this workflow-collection"
      }
      get_cost = {
        description = "get the cost of any workflow in this workflow-collection"
      }
      update = {
        description = "update any workflow in this workflow-collection"
      }
      alter_policies = {
        description = "create and delete policies on this workflow-collection"
      }
      read_policies = {
        description = "view all policies and policy details for this workflow-collection"
      }
    }
    ownerRoleName = "owner"
    roles = {
      owner = {
        roleActions = ["delete", "add", "view", "abort", "get_cost", "update", "alter_policies", "read_policies"]
      }
      reader = {
        roleActions = ["view", "get_cost"]
      }
      writer = {
        roleActions = ["view", "add", "delete", "abort", "get_cost", "update"]
      }
    }
    reuseIds = false
  }
  caas = {
    actionPatternObjects = {
      get_whitelist = {
        description = "view the whitelist"
      }
      alter_policies = {
        description = "create and delete policies for this caas"
      }
      read_policies = {
        description = "view all policies and policy details for this caas"
      }
    }
    ownerRoleName = "owner"
    roles = {
      owner = {
        roleActions = ["alter_policies", "read_policies"]
      }
      cromiam = {
        roleActions = ["get_whitelist"]
      }
    }
    reuseIds = false
  }
  billing-project = {
    actionPatternObjects = {
      create_workspace = {
        description = "create new workspaces in this billing-project"
      }
      alter_policies = {
        description = "create and delete policies for this billing-project"
      }
      read_policies = {
        description = "list all policies and policy details for this billing-project"
      }
      launch_batch_compute = {
        description = "launch workflows in this billing-project"
      }
      list_notebook_cluster = {
        description = "list all notebook clusters in this billing-project"
      }
      launch_notebook_cluster = {
        description = "launch a new notebook cluster in this billing-project"
      }
      delete_notebook_cluster = {
        description = ""
      }
      stop_start_notebook_cluster = {
        description = "stop and start notebook clusters in this billing-project"
      }
      list_persistent_disk = {
        description = "list all persistent disks in this billing-project"
      }
      create_persistent_disk = {
        description = "create persistent disk in this billing-project"
      }
      delete_persistent_disk = {
        description = "delete persistent disk in this billing-project"
      }
      create_kubernetes_app = {
        description = "create kubernetes application in this billing-project"
      }
      alter_google_role = {
        description = "modify the role of users on the google project (only a fixed set of roles are permitted)"
      }
      "share_policy::.+" = {
        description = "modify the membership of the specified policy"
      }
      "read_policy::.+" = {
        description = "view the membership of the specified policy"
      }
      view_status = {
        description = "view status of a billing-project"
      }
      add_to_service_perimeter = {
        description = "add this billing-project to a service-perimeter"
      }
      delete = {
        description = "delete this billing-project"
      }
    }
    ownerRoleName = "owner"
    roles = {
      owner = {
        roleActions = ["view_status", "create_workspace", "alter_policies", "read_policies", "launch_batch_compute", "list_notebook_cluster", "launch_notebook_cluster", "delete_notebook_cluster", "list_persistent_disk", "create_persistent_disk", "delete_persistent_disk", "create_kubernetes_app", "alter_google_role", "add_to_service_perimeter", "delete"]
      }
      workspace-creator = {
        roleActions = ["view_status", "create_workspace", "share_policy::can-compute-user", "read_policy::can-compute-user"]
      }
      batch-compute-user = {
        roleActions = ["launch_batch_compute"]
      }
      notebook-user = {
        roleActions = ["launch_notebook_cluster", "create_persistent_disk", "create_kubernetes_app"]
      }
    }
    reuseIds = true
  }
  notebook-cluster = {
    actionPatternObjects = {
      status = {
        description = "view notebook cluster status details and configuration"
      }
      connect = {
        description = "connect to the Jupyter notebook running on the notebook cluster"
      }
      delete = {
        description = "delete the notebook cluster"
      }
      read_policies = {
        description = "view all policies and policy details for the notebook cluster"
      }
      stop_start = {
        description = "stop and start the notebook cluster VMs"
      }
      modify = {
        description = "modify attributes of the cluster"
      }
    }
    ownerRoleName = "creator"
    roles = {
      creator = {
        roleActions = ["status", "connect", "delete", "read_policies", "stop_start", "modify"]
      }
    }
    reuseIds = false
  }
  persistent-disk = {
    actionPatternObjects = {
      read = {
        description = "read metadata and contents of persistent disk"
      }
      attach = {
        description = "attach persistent disk to a VM"
      }
      modify = {
        description = "modify persistent disk"
      }
      delete = {
        description = "delete persistent disk"
      }
      read_policies = {
        description = "view all policies and policy details for the persistent disk"
      }
    }
    ownerRoleName = "creator"
    roles = {
      creator = {
        roleActions = ["read", "attach", "modify", "delete", "read_policies"]
      }
    }
    reuseIds = false
  }
  kubernetes-app = {
    actionPatternObjects = {
      delete = {
        description = "delete kubernetes application"
      }
      connect = {
        description = "connect to kubernetes application"
      }
      update = {
        description = "update kubernetes application"
      }
      status = {
        description = "view details and configuration of the kubernetes application"
      }
      read_policies = {
        description = "view all policies and policy details for the kubernetes application"
      }
    }
    ownerRoleName = "creator"
    roles = {
      creator = {
        roleActions = ["delete", "connect", "update", "status", "read_policies"]
      }
      manager = {
        roleActions = ["delete", "status", "read_policies"]
      }
    }
    reuseIds = false
  }
  cloud-extension = {
    actionPatternObjects = {
      get_pet_private_key = {
        description = ""
      }
      alter_policies = {
        description = ""
      }
      read_policies = {
        description = ""
      }
    }
    ownerRoleName = "owner"
    roles = {
      owner = {
        roleActions = ["alter_policies", "read_policies"]
      }
      google = {
        roleActions = ["get_pet_private_key"]
      }
    }
    reuseIds = false
  }
  dockstore-tool = {
    actionPatternObjects = {
      "delete" = {
        description = "delete a tool"
      },
      "read_policies" = {
        description = "read tool policies"
      },
      "alter_policies" = {
        description = "alter tool policies"
      },
      "write" = {
        description = "modify tool"
      },
      "read" = {
        description = "read tool"
      }
    }
    ownerRoleName = "owner"
    roles = {
      owner = {
        roleActions = ["delete", "read_policies", "alter_policies", "write", "read"]
      },
      writer = {
        roleActions = ["write", "read"]
      },
      reader = {
        roleActions = ["read"]
      }
    }
    reuseIds = true

  }
  entity-collection = {
    actionPatternObjects = {
      "delete" = {
        description = "delete this entity collection"
      },
      "write" = {
        description = "create/update/delete entities in this collection"
      },
      "read" = {
        description = "read entities in this collection"
      },
      "alter_policies" = {
        description = "alter entity collection policies"
      },
      "read_policies" = {
        description = "read entity collection policies"
      }
    }
    ownerRoleName = "owner"
    roles = {
      owner = {
        roleActions = ["delete", "write", "read", "alter_policies", "read_policies"]
      },
      writer = {
        roleActions = ["write", "read"]
      },
      reader = {
        roleActions = ["read"]
      }
    }
    reuseIds = false
  }
  datarepo = {
    actionPatternObjects = {
      create_dataset = {
        description = "Has permission to create a dataset"
      }
      "share_policy::admin" = {
        description = "Can grant and revoke a users' admin permission"
      }
      "share_policy::steward" = {
        description = "Can grant and revoke a users' steward permission"
      }
      "read_policies" = {
        description = "Can read policies"
      }
      "read_policy::steward" = {
        description = "Can read the steward policy"
      }
      "alter_policies" = {
        description = "Can alter policies"
      }
      "list_jobs" = {
        description = "Can list repo jobs"
      }
      "delete_jobs" = {
        description = "Can delete repo jobs"
      }
      "delete" = {
        description = "Can delete policies/resources"
      }
    }
    ownerRoleName = "admin"
    roles = {
      admin = {
        roleActions = ["list_jobs", "delete_jobs", "delete", "share_policy::steward", "share_policy::admin", "read_policies", "alter_policies"]
      }
      steward = {
        roleActions = ["list_jobs", "delete_jobs", "create_dataset", "share_policy::steward", "read_policy::steward"]
      }
    }
    reuseIds = true
  }
  study = {
    actionPatternObjects = {
      delete = {
        description = "delete old type study"
      }
    }
    ownerRoleName = "steward"
    roles = {
      steward = {
        roleActions = ["delete", "read_policies", "alter_policies"]
      }
    }
    reuseIds = true
  }
  dataset = {
    actionPatternObjects = {
      read_dataset = {
        description = "Read dataset metadata"
      }
      edit_dataset = {
        description = "Change dataset metadata"
      }
      delete = {
        description = "Delete dataset"
      }
      read_data = {
        description = "Read dataset data"
      }
      ingest_data = {
        description = "Add data to a dataset"
      }
      update_data = {
        description = "Add or delete data for a dataset"
      }
      create_datasnapshot = {
        description = "Create a datasnapshot that includes this dataset"
      }
      "share_policy::steward" = {
        description = "Can grant and revoke a users' steward permission"
      }
      "share_policy::custodian" = {
        description = "Can grant and revoke a users' custodian permission"
      }
      "share_policy::ingester" = {
        description = "Can grant and revoke a users' ingester permission"
      }
      "read_policies" = {
        description = "Can read policies"
      }
      "alter_policies" = {
        description = "Can alter policies"
      }
    }
    ownerRoleName = "steward"
    roles = {
      steward = {
        roleActions = ["delete", "read_dataset", "read_data", "edit_dataset",  "ingest_data",  "update_data",  "create_datasnapshot",  "share_policy::steward", "share_policy::custodian", "share_policy::ingester", "read_policies", "alter_policies"]
      }
      custodian = {
        roleActions = ["read_dataset", "read_data", "create_datasnapshot"]
      }
      ingester = {
        roleActions = ["read_dataset", "read_data", "ingest_data"]
      }
    }
    reuseIds = true
  }
  datasnapshot = {
    actionPatternObjects = {
      delete = {
        description = "Delete datasnapshot"
      }
      edit_datasnapshot = {
        description = "Change datasnapshot name and description"
      }
      read_data = {
        description = "Read data from the datasnapshot"
      }
      discover_data = {
        description = "Discover data about the datasnapshot"
      }
      "share_policy::steward" = {
        description = "Can grant and revoke a users' steward permission"
      }
      "share_policy::custodian" = {
        description = "Can grant and revoke a users' custodian permission"
      }
      "read_policy::custodian" = {
        description = "Can see the custodians of a dataset"
      }
      "share_policy::reader" = {
        description = "Can grant and revoke a users' read permission"
      }
      "share_policy::discoverer" = {
        description = "Can grant and revoke a users' discover permission"
      }
      "read_policies" = {
        description = "Can read policies"
      }
      "alter_policies" = {
        description = "Can alter policies"
      }
    }
    ownerRoleName = "steward"
    roles = {
      steward = {
        roleActions = ["delete", "edit_datasnapshot",  "read_data",  "discover_data",  "share_policy::steward", "share_policy::custodian", "share_policy::reader",  "share_policy::discoverer", "read_policies", "alter_policies"]
      }
      custodian = {
        roleActions = ["delete", "edit_datasnapshot",  "read_data",  "discover_data",  "share_policy::reader",  "share_policy::discoverer", "read_policies"]
      }
      discoverer = {
        roleActions = ["discover_data", "read_policy::custodian"]
      }
      reader = {
        roleActions = ["read_data", "discover_data", "read_policy::custodian"]
      }
    }
    reuseIds = true
  }
  service-perimeter = {
    actionPatternObjects = {
      alter_policies = {
        description = "create and delete policies for this service-perimeter"
      }
      read_policies = {
        description = "list all policies and policy details for this service-perimeter"
      }
      add_project = {
        description = "add a project to this service-perimeter"
      }
      add_account_to_whitelist = {
        description = "add a user or service-account to this service-perimeter's access level"
      }
      remove_account_from_whitelist = {
        description = "remove a user or service-account to this service-perimeter's access level"
      }
      remove_project = {
        description = "remove a project from this service-perimeter"
      }
      delete = {
        description = "delete this service-perimeter"
      }
    }
    ownerRoleName = "owner"
    roles = {
      owner = {
        roleActions = ["alter_policies", "read_policies", "add_project", "add_account_to_whitelist", "remove_account_from_whitelist", "remove_project", "delete"]
      }
    }
    reuseIds = true
  }
  mc-workspace = {
    "actionPatternObjects" = {
      manage = {
        description = "Workspace management operations: change settings, delete any resource, add/remove users, set user roles"
      }
      "data-resource" = {
        description = "Create, delete, and otherwise manage controlled data resources"
      }
      "compute-resource" = {
        description = "Create, delete, and otherwise manage controlled compute resources"
        authDomainConstrainable = true
      }
      "write" = {
        description = "Perform write operations on controlled resources"
        authDomainConstrainable = true
      }
      "read" = {
        description = "Perform read operations on controlled and uncontrolled resources"
        authDomainConstrainable = true
      }
      "clone" = {
        description = "Perform clone of this workspace"
      }
      "enabled" = {
        description = "Applies only to applications. An application with enabled permission is able to access the workspace."
      }
      "share_policy::data-resource" = {
        description = ""
      }
      "share_policy::compute-resource" = {
        description = ""
      }
      "share_policy::write" = {
        description = ""
      }
      "share_policy::read" = {
        description = ""
      }
      "share_policy::clone" = {
        description = ""
      }
    }
    ownerRoleName = "owner"
    roles = {
      owner = {
        roleActions = ["manage", "share_policy::data-resource", "data-resource", "share_policy::compute-resource", "compute-resource", "share_policy::write", "write", "share_policy::read", "read", "share_policy::clone", "clone"]
      }
      data-manager = {
        roleActions = ["data-resource", "write", "read"]
      }
      compute-manager = {
        roleActions = ["compute-resource", "write", "read"]
      }
      writer = {
        roleActions = ["write", "read"]
      }
      reader = {
        roleActions = ["read"]
      }
      cloner = {
        roleActions = ["clone"]
      }
      writer-share = {
        roleActions = ["share_policy::write", "write", "share_policy::read", "read"]
      }
      reader-share = {
        roleActions = ["share_policy::read", "read"]
      }
      cloner-share = {
        roleActions = ["share_policy::clone", "clone"]
      }
      enabled-application = {
        roleActions = ["enabled"]
      }
    }
    authDomainConstrainable = true
    reuseIds = false
  }
}


distributedLock {
  retryInterval: 5s
  maxRetry: 10
}

blockedEmailDomains = ["qwiklabs-gsuite.net", "qwiklabs.net"]
