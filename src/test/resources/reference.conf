fruits {
  banana = "yellow"
}

googleServices {
  appName = "firecloud:sam"
  appsDomain = "dev.test.firecloud.org"
  environment = "local"
  pathToPem = "/etc/sam-account.pem"
  pathToDefaultCredentialJson = "fakePath"
  serviceAccountClientId = "109949113883754608360"
  serviceAccountClientEmail = "sam-dev-service-account@broad-dsde-dev.iam.gserviceaccount.com"
  serviceAccountClientProject = "broad-dsde-dev"
  subEmail = "google@dev.test.firecloud.org"
  projectServiceAccount = "broad-dsde-dev@gs-project-accounts.iam.gserviceaccount.com"
  terraGoogleOrgNumber = "mock-org-number" # This org number needs to match what is specified in workbench-libs/google/src/main/scala/org/broadinstitute/dsde/workbench/google/HttpGoogleProjectDAO.scala.getAncestry

  groupSync {
    pubSubProject = proj
    pollInterval = 10ms
    pollJitter = 0s
    pubSubTopic = top
    pubSubSubscription = sub
    workerCount = 1
  }

  disableUsers {
    pubSubProject = proj
    pollInterval = 10ms
    pollJitter = 0s
    pubSubTopic = top
    pubSubSubscription = sub
    workerCount = 1
  }

  notifications {
    project = proj
    topicName = "notifications"
  }

  googleKeyCache {
    bucketName = "my-test-bucket"
    activeKeyMaxAge = 25000 #test objects default to Jan 1 1970. Cranking this value up allows for test keys to be seen as active
    retiredKeyMaxAge = 25048

    monitor {
      pubSubProject = "broad-dsde-dev"
      pollInterval = 1m
      pollJitter = 10s
      pubSubTopic = "sam-google-key-cache"
      pubSubSubscription = "sam-google-key-cache-sub"
      workerCount = 1
    }
  }

  kms {
    project = "broad-dsde-dev"
    location = "global"
    keyRingId = "not-actually-used"
    keyId = "dockerhub-key"
    rotationPeriod = "180 days"
  }
}

termsOfService {
  enabled = false
  version = 1
  url = "app.terra.bio/#terms-of-service"
}

petServiceAccount {
  googleProject = "my-pet-project"
  serviceAccountUsers = ["some-other-sa@test.iam.gserviceaccount.com"]
}

testStuff = {
  resourceTypes = {
    testType = {
      actionPatterns = {
        alter_policies = {
          description = ""
          authDomainConstrainable = true
        }
        read_policies = {
          description = ""
        }
      }
      ownerRoleName = "owner"
      roles = {
        owner = {
          roleActions = ["alter_policies", "read_policies"],
          includedRoles = ["nonOwner"],
          descendantRoles = {
            otherType = ["owner"]
          }
        },
        nonOwner = {
          roleActions = []
        }
      }
      reuseIds = false
    }
  }
  # Test MRG in which to create managed identities
  azure {
    tenantId = "0cb7a640-45a2-4ed6-be9f-63519f86e04b"
    subscriptionId = "3efc5bdf-be0e-44e7-b1d7-c08931e3c16c"
    managedResourceGroupName = "mrg-terra-integration-test-20211118"
  }
}

// dummy value for testing only
oidc {
  authorityEndpoint = "https://accounts.google.com"
  oidcClientId = "some-client"
  oidcClientSecret = "some-secret"
  legacyGoogleClientId = "another-client"
}

liquibase {
  changelog = "org/broadinstitute/dsde/sam/liquibase/changelog.xml"
  initWithLiquibase = true
}

db {
  sam_read {
    poolInitialSize = 5
    poolMaxSize = 5
    poolConnectionTimeoutMillis = 5000
    driver = "org.postgresql.Driver"
    url = "jdbc:postgresql://"${postgres.host}":"${postgres.port}"/testdb?stringtype=unspecified"
    user = "sam-test"
    password = "sam-test"
  }

  sam_write {
    poolInitialSize = 5
    poolMaxSize = 5
    poolConnectionTimeoutMillis = 5000
    driver = "org.postgresql.Driver"
    url = "jdbc:postgresql://"${postgres.host}":"${postgres.port}"/testdb?stringtype=unspecified"
    user = "sam-test"
    password = "sam-test"
  }

  // this background pool is used to test the status of a pool that cannot connect
  sam_background {
    poolInitialSize = 5
    poolMaxSize = 5
    poolConnectionTimeoutMillis = 5000
    driver = "org.postgresql.Driver"
    url = "jdbc:postgresql://does_not_exist/testdb?stringtype=unspecified"
    user = "sam-test"
    password = "sam-test"
  }
}

scalikejdbc.global.loggingSQLAndTime {
  enabled = false, # switch this to true to print sql
  singleLineMode = true, # switch this to false to see stack trace information about where sql was executed
  printUnprocessedStackTrace = false,
  stackTraceDepth= 15,
  logLevel = warn, # this is set to warn so we don't have to fiddle with logback settings too
  warningEnabled = false,
  warningThresholdMillis = 3000,
  warningLogLevel = warn
}


dataStore {
  live = postgres
}

termsOfService {
  enabled = false
  isGracePeriodEnabled = false
  version = 0
  url = "app.terra.bio/#terms-of-service"
}

admin {
    superAdminsGroup = "sam-super-admins@dev.test.firecloud.org"
    allowedAdminEmailDomains = ["test.firecloud.org"]
}
